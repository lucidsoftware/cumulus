#!/usr/bin/env ruby

require "optparse"

def usage_message
  "Usage: cumulus [autoscaling|cloudfront|ec2|elb|help|iam|kinesis|route53|s3|security-groups|sqs|vpc]"
end

def help_message
  [
    "cumulus: AWS Configuration Manager",
    "\tConfiguration based management of AWS resources.",
    "\t#{usage_message}",
    "",
    "Modules",
    "\tautoscaling\t- Manages configuration for EC2 AutoScaling",
    "\tcloudfront\t- Manages configuration for cloudfront distributions",
    "\tec2\t\t- Manages configuration for managed EC2 instances, EBS volumes and Network Interfaces",
    "\telb\t\t- Manages configuration for elastic load balancers",
    "\tiam\t\t- Compiles IAM roles and policies that are defined with configuration files and syncs the resulting IAM roles and policies with AWS",
    "\tkinesis\t\t- Manages configuration for Kinesis streams",
    "\trds\t\t- Manages configuration for the Relational Database Service",
    "\troute53\t\t- Manages configuration for Route53",
    "\ts3\t\t- Manages configuration of S3 buckets",
    "\tsecurity-groups\t- Manages configuration for EC2 Security Groups",
    "\tsqs\t\t- Manages configuration for SQS Queues",
    "\tvpc\t\t- Manages configuration for Virtual Private Clouds",
    "\n"
  ].join("\n")
end

if ARGV[0] == "help"
  ARGV[0] = "--help"
end

# read in the optional path to the configuration file to use
options = {
  :config => Dir.pwd,
  :profile => nil,
  :assume_role => nil,
  :autoscaling_force_size => false,
  :verbose => false
}
OptionParser.new do |opts|
  opts.banner = help_message

  opts.on("-c", "--config [DIR]", "Specify the configuration directory") do |c|
    options[:config] = File.expand_path(c)
  end

  opts.on("-p", "--aws-profile [NAME]", "Specify the AWS profile to use for API requests") do |p|
    options[:profile] = p
  end

  opts.on("--autoscaling-force-size", "Forces autoscaling to use configured min/max/desired values instead of scheduled actions") do |f|
    options[:autoscaling_force_size] = true
  end

  opts.on("-v", "--verbose", "Verbose output") do |v|
    options[:verbose] = true
  end

  opts.on("-r", "--assume-role [NAME]", "Assume Role") do |a|
    options[:assume_role] = a
  end
end.parse!

unless ARGV.size > 0 and ["iam", "help", "--help", "autoscaling", "route53", "s3", "security-groups", "cloudfront", "elb", "vpc", "kinesis", "sqs", "ec3", "rds"].include?(ARGV[0])

  puts usage_message
  exit
end

# config parameters can also be read in from environment variables
if !ENV["CUMULUS_CONFIG"].nil?
  options[:config] = ENV["CUMULUS_CONFIG"]
end

if !ENV["CUMULUS_AWS_PROFILE"].nil?
  options[:profile] = ENV["CUMULUS_AWS_PROFILE"]
end

# set up the application path
$LOAD_PATH.unshift(File.expand_path(
  File.join(File.dirname(__FILE__), "../lib")
))

# set up configuration for the application
require "conf/Configuration"

puts "Reading configuration from '#{options[:config]}'" if options[:verbose]

Cumulus::Configuration.init(options[:config], options[:profile], options[:assume_role], options[:autoscaling_force_size])

puts "Using aws profile '#{options[:profile]}'" if options[:verbose]
puts "Using assume role '#{options[:assume_role]}'" if options[:verbose]


if ARGV[0] == "iam"
  require "iam/Commands"
  Cumulus::IAM::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "autoscaling"
  require "autoscaling/Commands"
  Cumulus::AutoScaling::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "cloudfront"
  require "cloudfront/Commands"
  Cumulus::CloudFront::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "ec2"
  require "ec2/Commands"
  Cumulus::EC2::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "elb"
  require "elb/Commands"
  Cumulus::ELB::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "kinesis"
  require "kinesis/Commands"
  Cumulus::Kinesis::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "rds"
  require "rds/Commands"
  Cumulus::RDS::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "route53"
  require "route53/Commands"
  Cumulus::Route53::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "security-groups"
  require "security/Commands"
  Cumulus::SecurityGroups::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "s3"
  require "s3/Commands"
  Cumulus::S3::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "sqs"
  require "sqs/Commands"
  Cumulus::SQS::Commands.parse(ARGV[1..-1])
elsif ARGV[0] == "vpc"
  require "vpc/Commands"
  Cumulus::VPC::Commands.parse(ARGV[1..-1])
end
